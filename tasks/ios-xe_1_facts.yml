---
# tasks file for ansible-cisco_iosxe_upgrade
#
# ██╗ ██████╗ ███████╗     ██╗  ██╗███████╗        ██╗        ███████╗ █████╗  ██████╗████████╗███████╗
# ██║██╔═══██╗██╔════╝     ╚██╗██╔╝██╔════╝       ███║        ██╔════╝██╔══██╗██╔════╝╚══██╔══╝██╔════╝
# ██║██║   ██║███████╗█████╗╚███╔╝ █████╗         ╚██║        █████╗  ███████║██║        ██║   ███████╗
# ██║██║   ██║╚════██║╚════╝██╔██╗ ██╔══╝          ██║        ██╔══╝  ██╔══██║██║        ██║   ╚════██║
# ██║╚██████╔╝███████║     ██╔╝ ██╗███████╗███████╗██║███████╗██║     ██║  ██║╚██████╗   ██║   ███████║
# ╚═╝ ╚═════╝ ╚══════╝     ╚═╝  ╚═╝╚══════╝╚══════╝╚═╝╚══════╝╚═╝     ╚═╝  ╚═╝ ╚═════╝   ╚═╝   ╚══════╝
# 
- name: ios-xe_1_facts | Define section
  ansible.builtin.set_fact:
    section: "ios-xe_1_facts"

#------------------------------------------------------------------------------
# Extract the Cisco model variant name from the variable ansible_net_model
# (which was created after gathering hardware facts).
#------------------------------------------------------------------------------
- name: "{{ section }} | Determine Cisco model variant"
  ansible.builtin.set_fact:
    model_variant: "{{ ansible_net_model 
      | filter_model(
        True 
          if (debug_filter is defined and debug_filter) 
          else False ) }}"

#------------------------------------------------------------------------------
# Asserts given expressions are true.
# Validate the newly created variable model_variant
#------------------------------------------------------------------------------
- name: "{{ section }} | Validate Cisco model variant"
  ansible.builtin.assert:
    that:
      - model_variant is defined
      - model_variant|length > 0
    fail_msg: "Unable to collect the Cisco model variant from {{ ansible_net_model }}"
    quiet: true

#------------------------------------------------------------------------------
# Load the dependent model variant file
# Required keynames are :
#   model_supported       <Boolean>
#   required_ios_binary   <string>
#   required_ios_md5      <string>
#   required_ios_sha512   <string>
#   required_ios_size_kb  <integer>
#   required_ios_version  <string>
#   use_signature         <string>
#------------------------------------------------------------------------------
- name: "{{ section }} | Load dependent variables"
  include_vars: "{{lookup('first_found', params)}}"
  vars:
    params:
      files:
        - "{{ model_variant }}/{{ ansible_net_model }}.yml"
        - "{{ model_variant }}/{{ model_variant }}.yml"
        - unknown.yml
      paths:
        - "vars"

#------------------------------------------------------------------------------
# Asserts given expressions are true.
# If the "model_supported" is set with the boolean TRUE then continue
# else don't progress any other tasks and set for the remote device as failure.
#------------------------------------------------------------------------------
- name: "{{ section }} | Model is supported"
  ansible.builtin.assert:
    that:
      - model_supported
    fail_msg: "The model variant is not supported."
    quiet: true

#------------------------------------------------------------------------------
# Run several Cisco commands to process later on the command output
#------------------------------------------------------------------------------
- name: "{{ section }} | Run exec commands"
  register: commands_output_list
  cisco.ios.ios_command:
    commands:
      - show version
      - show ?
      - '?'

- name: ios-xe_1_facts 
  when:
    - required_ios_version is defined
  block:

    #       _                                        _             
    #   ___| |__   _____      __ __   _____ _ __ ___(_) ___  _ __  
    #  / __| '_ \ / _ \ \ /\ / / \ \ / / _ \ '__/ __| |/ _ \| '_ \ 
    #  \__ \ | | | (_) \ V  V /   \ V /  __/ |  \__ \ | (_) | | | |
    #  |___/_| |_|\___/ \_/\_/     \_/ \___|_|  |___/_|\___/|_| |_|
    #
    #--------------------------------------------------------------------------
    # Build device_version_info
    #--------------------------------------------------------------------------
    - ansible.builtin.include_tasks:
        file: "facts/{{ ansible_net_iostype|lower}}_version.yml"
        apply:
          tags:
          - facts
          - cleaning
          - staging
          - verifying
          - installing
          - booting
      when: commands_output_list.stdout|length > 0

    #       _                                  _ _       _     
    #   ___| |__   _____      __  _____      _(_) |_ ___| |__  
    #  / __| '_ \ / _ \ \ /\ / / / __\ \ /\ / / | __/ __| '_ \ 
    #  \__ \ | | | (_) \ V  V /  \__ \\ V  V /| | || (__| | | |
    #  |___/_| |_|\___/ \_/\_/   |___/ \_/\_/ |_|\__\___|_| |_|
    #                                                      
    #--------------------------------------------------------------------------
    # Build device_switch_info
    #--------------------------------------------------------------------------
    - ansible.builtin.include_tasks:
        file: "facts/{{ ansible_net_iostype|lower}}_switch.yml"
        apply:
          tags:
          - facts
          - cleaning
          - staging
          - verifying
          - installing
          - booting
      when: commands_output_list.stdout|length > 1

    #                     _                                   _   _             
    # _ __ ___   ___   __| | ___    ___  _ __   ___ _ __ __ _| |_(_) ___  _ __  
    #| '_ ` _ \ / _ \ / _` |/ _ \  / _ \| '_ \ / _ \ '__/ _` | __| |/ _ \| '_ \ 
    #| | | | | | (_) | (_| |  __/ | (_) | |_) |  __/ | | (_| | |_| | (_) | | | |
    #|_| |_| |_|\___/ \__,_|\___|  \___/| .__/ \___|_|  \__,_|\__|_|\___/|_| |_|
    #                                   |_| 
    #--------------------------------------------------------------------------
    # Build device_mode_operation
    #--------------------------------------------------------------------------
    - ansible.builtin.include_tasks:
        file: "facts/{{ ansible_net_iostype|lower}}_mode.yml"
        apply:
          tags:
          - facts
          - cleaning
          - staging
          - verifying
          - installing
          - booting
      when: device_version_info is defined
    
    #   _           _        _ _                      _ 
    #  (_)_ __  ___| |_ __ _| | |   ___ _ __ ___   __| |
    #  | | '_ \/ __| __/ _` | | |  / __| '_ ` _ \ / _` |
    #  | | | | \__ \ || (_| | | | | (__| | | | | | (_| |
    #  |_|_| |_|___/\__\__,_|_|_|  \___|_| |_| |_|\__,_|
    #                                                  
    #--------------------------------------------------------------------------
    # Build device_install_cmd
    #--------------------------------------------------------------------------
    - ansible.builtin.include_tasks:
        file: "facts/{{ ansible_net_iostype|lower}}_install.yml"
        apply:
          tags:
          - facts
          - cleaning
          - staging
          - verifying
          - installing
          - booting
      when: commands_output_list.stdout|length > 2

    #  _                  _   _           
    # (_)_ __   __ _  ___| |_(_)_   _____ 
    # | | '_ \ / _` |/ __| __| \ \ / / _ \
    # | | | | | (_| | (__| |_| |\ V /  __/
    # |_|_| |_|\__,_|\___|\__|_| \_/ \___|
    #                               
    #--------------------------------------------------------------------------
    # Build device_package_inactive
    #--------------------------------------------------------------------------
    - ansible.builtin.include_tasks:
        file: "facts/{{ ansible_net_iostype|lower}}_inactive.yml"
        apply:
          tags:
          - facts
          - cleaning
          - staging
          - verifying
          - installing
          - booting        
      when: device_install_cmd|lower == "install"

    #    __ _           _  _     _       
    #   / _(_)_ __   __| || |__ (_)_ __  
    #  | |_| | '_ \ / _` || '_ \| | '_ \ 
    #  |  _| | | | | (_| || |_) | | | | |
    #  |_| |_|_| |_|\__,_||_.__/|_|_| |_|
    #
    #--------------------------------------------------------------------------
    # Check if binary file already exist on active filesystem
    #--------------------------------------------------------------------------
    - ansible.builtin.include_tasks:
        file: "facts/{{ ansible_net_iostype|lower}}_findbin.yml"
        apply:
          tags:
          - facts
          - cleaning
          - staging
          - verifying
          - installing
          - booting        

    #       _                      __ _ _                     _                 
    #   ___| |__   _____      __  / _(_) | ___  ___ _   _ ___| |_ ___ _ __ ___  
    #  / __| '_ \ / _ \ \ /\ / / | |_| | |/ _ \/ __| | | / __| __/ _ \ '_ ` _ \ 
    #  \__ \ | | | (_) \ V  V /  |  _| | |  __/\__ \ |_| \__ \ ||  __/ | | | | |
    #  |___/_| |_|\___/ \_/\_/   |_| |_|_|\___||___/\__, |___/\__\___|_| |_| |_|
    #                                               |___/                       
    #
    #--------------------------------------------------------------------------
    # Build device_filesystem, device_filesystem_list and device_filesystem_info
    #--------------------------------------------------------------------------
    - ansible.builtin.include_tasks:
        file: "facts/{{ ansible_net_iostype|lower}}_filesystem.yml"
        apply:
          tags:
          - facts
          - cleaning
          - staging
          - verifying
          - installing
          - booting

#--------------------------------------------------------------------------
# Define the next step
#--------------------------------------------------------------------------
- name: "{{ section }} | Next step"
  when:
    - required_ios_version != ansible_net_version
    - not using_tag
  ansible.builtin.set_fact:
    ios_next_step: "{{
      'booting'
        if (device_package_inactive) 
        else
          (
            (
              'cleaning'
                if (cleaning is defined and cleaning)
                else 'staging'
            ) 
              if 
                (
                  not found_required_file
                ) else 'verifying'            
          )
    }}"  

#                       _ _   
#   _ __ ___  ___ _   _| | |_ 
#  | '__/ _ \/ __| | | | | __|
#  | | |  __/\__ \ |_| | | |_ 
#  |_|  \___||___/\__,_|_|\__|
#                             
- name: "{{ section }} | Results"
  ansible.builtin.debug:
    msg:
      - "{{ inventory_hostname  }} is classified as 
          {{ device_product }} product ({{ model_variant }})
          {{
            ( 
              'with '
                if (show_switch)
                else 'without ' 
            ) + 'stack functionality.'
              if (device_product|lower == 'switch') 
              else '.'
        }}"
      - "The current running IOS-XE version is {{ ansible_net_version }} 
        {{ 
          ('but require to have version ' + required_ios_version) 
            if (required_ios_version != ansible_net_version) 
            else 
              (
                'which is the required IOS version'
              ) 
        }}."     
      - "The required binary file {{ required_ios_binary }} 
        {{
          (
            (
              'has not'
                if (not found_required_file)
                else 'has'
            ) + ' be found on required filesystem(s) ' 
            + ( device_findfile_info.keys() | list |  string )
          ) if 
            ( 
              required_ios_version != ansible_net_version 
            )             
            else 'is our running IOS image.'
        }}"             
      - "The boot mode of the IOS-XE device is set with 
          '{{ device_install_mode|upper }}' mode."
      - "The distributed software command is '{{ device_install_cmd }}'."
      - "{{
          (
            ( 'Inactive package version ' + required_ios_version + ' found.' )
                if (device_package_inactive)
                else ( 
                'Inactive package version ' + required_ios_version + 
                ' not found.' 
                )
          )
            if ( device_package_inactive is defined and
                 device_install_cmd|lower == 'install')
            else (
              'The command ' + device_install_cmd|lower + ' does not support a list of inactive packages.'
            )
          }}"
      - "{{
          (
            (
             'Next step is ' + ios_next_step
            ) if 
                ( 
                  required_ios_version != ansible_net_version 
                )
              else 'No further steps are needed.'
          ) if
              (
                not using_tag
              ) 
            else 
              (
                (
                  'Ending of tag facts.'
                ) if 
                    (
                      ios_next_step|lower == 'facts'
                    )
                  else ( 'Next step is ' + ios_next_step )
              ) }}"
